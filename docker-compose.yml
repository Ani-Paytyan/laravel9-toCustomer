version: "3.0"

services:
    app:
        container_name: 'tm-customer-app'
        user: '${USERID}:${USERGROUPID}'
        build:
            context: './.docker/app'
            dockerfile: 'Dockerfile'
            args:
                USERID: '${USERID}'
                USERNAME: '${APPUSERNAME}'
                USERGROUPID: '${USERGROUPID}'
                USERGROUPNAME: '${USERGROUPNAME}'
                #SSH_PRIVATE_KEY: '$(cat ~/.ssh/id_rsa)'

        #ports:
        #  - '${FORWARD_WEBSOCKETS_PORT:-6001}:6001'
        volumes:
            - './:/app'
        depends_on:
            - mysql
        links:
            - mysql
        restart: on-failure
        networks:
            - tm-customer

    nginx:
        container_name: 'tm-customer-nginx'
        image: nginx
        links:
            - app
        volumes:
            - './:/app'
            - './.docker/nginx/conf.d:/etc/nginx/conf.d'
        ports:
            - '${APP_PORT:-80}:80'
        depends_on:
            - app
        restart: on-failure
        networks:
            - tm-customer

    mysql:
        container_name: 'tm-customer-mysql'
        image: mysql:8.0
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'tm-customer-mysql:/var/lib/mysql'
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping" ]
        restart: on-failure
        networks:
            - tm-customer

    mailhog:
        container_name: 'tm-customer-mailhog'
        image: 'mailhog/mailhog:latest'
        ports:
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - tm-customer

    node:
        user: '${USERID}:${USERGROUPID}'
        container_name: 'tm-customer-node'
        image: node:16-alpine
        volumes:
            - './:/app'
            - './.docker/node/.npm:/.npm'
        working_dir: '/app'
        networks:
            - tm-customer

    #redis:
    #  container_name: 'tm-customer-redis'
    #  image: redis:6.2
    #  volumes:
    #    - 'tm-customer-redis:/usr/local/etc/redis'
    #  networks:
    #    - tm-customer

networks:
    tm-customer:
        driver: bridge

volumes:
    tm-customer-mysql:
        driver: local
    # tm-customer-redis:
    #   driver: local
